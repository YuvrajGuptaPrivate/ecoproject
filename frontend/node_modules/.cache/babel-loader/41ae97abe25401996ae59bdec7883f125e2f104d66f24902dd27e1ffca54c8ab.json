{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yuvraj\\\\ecoproject\\\\frontend\\\\src\\\\Components\\\\ProductDetails.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TestComponent() {\n  console.log('TestComponent is being rendered!');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Test Component\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n/*function ProductDetails() {\r\n    console.log('ProductDetails component is being rendered!'); // Add this line\r\n  const [product, setProduct] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const { productId } = useParams(); // Access product ID from route parameter\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:4000/product/${productId}`) // Fetch product based on ID\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => setProduct(data))\r\n      .catch(error => setError(error.message)); // Catch and handle errors\r\n  }, [productId]); // Dependency array to trigger fetch on ID change\r\n\r\n  if (!product) {\r\n    if (error) {\r\n      return <div>Error: {error}</div>;\r\n    } else {\r\n      return <div>Loading product details...</div>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"product-details\">\r\n      <img alt=\"\" src={product.image} className=\"img-fluid product-thumbnail\" />\r\n      <h3 className=\"product-title\">{product.name}</h3>\r\n      <strong className=\"product-price\">Rs{product.new_price}.00</strong>\r\n      <p>{product.description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductDetails; */\n_c = TestComponent;\nexport default TestComponent;\nvar _c;\n$RefreshReg$(_c, \"TestComponent\");","map":{"version":3,"names":["TestComponent","console","log","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yuvraj/ecoproject/frontend/src/Components/ProductDetails.js"],"sourcesContent":["\r\n\r\nfunction TestComponent() {\r\n    console.log('TestComponent is being rendered!');\r\n    return <div>Test Component</div>;\r\n  } \r\n/*function ProductDetails() {\r\n    console.log('ProductDetails component is being rendered!'); // Add this line\r\n  const [product, setProduct] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const { productId } = useParams(); // Access product ID from route parameter\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:4000/product/${productId}`) // Fetch product based on ID\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => setProduct(data))\r\n      .catch(error => setError(error.message)); // Catch and handle errors\r\n  }, [productId]); // Dependency array to trigger fetch on ID change\r\n\r\n  if (!product) {\r\n    if (error) {\r\n      return <div>Error: {error}</div>;\r\n    } else {\r\n      return <div>Loading product details...</div>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"product-details\">\r\n      <img alt=\"\" src={product.image} className=\"img-fluid product-thumbnail\" />\r\n      <h3 className=\"product-title\">{product.name}</h3>\r\n      <strong className=\"product-price\">Rs{product.new_price}.00</strong>\r\n      <p>{product.description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductDetails; */\r\nexport default TestComponent;"],"mappings":";;AAEA,SAASA,aAAaA,CAAA,EAAG;EACrBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C,oBAAOC,OAAA;IAAAC,QAAA,EAAK;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCAC,EAAA,GAJST,aAAa;AAyCtB,eAAeA,aAAa;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}